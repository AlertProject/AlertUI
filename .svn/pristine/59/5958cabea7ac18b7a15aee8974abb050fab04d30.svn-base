package com.jsi.keui;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.Map;
import java.util.Properties;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jsi.keui.utils.Utils;

/**
 * Servlet implementation class QueryServlet
 */
public class QueryServlet extends KEUIServlet {

	private static final long serialVersionUID = 1079144340811966229L;
	
	private static final Logger log = LoggerFactory.getLogger(QueryServlet.class);

	private static final String TYPE_PARAM = "type";
	private static final String QUERY_PARAM = "query";
	
	public static final String PEOPLE_TYPE = "peopleData";
	public static final String KEYWORD_TYPE = "keywordData";
	public static final String TIMELINE_TYPE = "timelineData";
	public static final String ITEM_TYPE = "itemData";
	
//	private static final String ISSUE_TYPE = "issueId";
	private static final String ITEM_FULL_TYPE = "itemFull";


	/**
	 * @throws JMSException
	 *             If a connection to ActiveMQ cannot be established.
	 * @see HttpServlet#HttpServlet()
	 */
	public QueryServlet() throws JMSException {
		super();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	@SuppressWarnings("unchecked")
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		Map<String, String[]> parameterMap = request.getParameterMap();
		
		if (log.isDebugEnabled())
			log.debug("Received quer request...");

		if (!parameterMap.containsKey(TYPE_PARAM))
			throw new IllegalArgumentException("The request doesn't contain parameter '" + TYPE_PARAM + "'!");

		String type = request.getParameter(TYPE_PARAM);

		// compose a message and send it to activeMQ
		String msg;
		if (PEOPLE_TYPE.equals(type) || KEYWORD_TYPE.equals(type) || TIMELINE_TYPE.equals(type) || ITEM_TYPE.equals(type)) {
			// gather the parameters
			Properties props = new Properties();
			for (String key : parameterMap.keySet()) {
				String value = request.getParameter(key);
				if (value != null && !value.isEmpty())
					props.put(key, value);
			}
			
			try {
				if (log.isDebugEnabled())
					log.debug("Generating KEUI message with parameters: " + props.toString());
				
				msg = Utils.genQueryMessage(props);
			} catch (ParseException px) {
				throw new IllegalArgumentException("The date is given in incorrect format!");
			}
		} else if (ITEM_FULL_TYPE.equals(type)) {
			// check if the ID is a number
			String query = request.getParameter(QUERY_PARAM);
			Long id = Utils.parseLong(query);
			
			if (log.isDebugEnabled())
				log.debug("Fetching item details for item with ID: " + id);
			
			if (id == null)
				throw new IllegalArgumentException("ID of the item " + query + " is not an integer!!");
			msg = Utils.genFullDataMessage(id);
		} else
			throw new IllegalArgumentException("An unexpected query type!");
		
		final String requestID = Utils.genRequestID();
		msg = msg.replace("${" + REQUEST_ID + "}", requestID);

		try {
			if (msg != null && !msg.isEmpty()) {
				if (log.isDebugEnabled())
					log.debug("Sending message to KEUI component...");
				
				// send the message
				Message mqMsg = mqSession.createTextMessage(msg);

				mqProducer.send(mqMsg);
				
				String responseXML = receiveMessage(requestID);
				
				if (log.isDebugEnabled())
					log.debug("Received response message...");
				
				if (responseXML != null) {
					response.setContentType("text/xml");
					PrintWriter writer = new PrintWriter(response.getOutputStream());
					writer.write(responseXML);
					writer.flush();
					writer.close();
				}
			}
		} catch (JMSException ex) {
			log.error("An unexpected exception occurred!", ex);
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
	}
}
