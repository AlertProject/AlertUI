package com.jsi.keui;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.activemq.util.ByteArrayInputStream;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.jsi.keui.utils.Utils;

/**
 * A <code>Servlet</code> which handles suggestion requests.
 */
public class SuggestServlet extends KEUIServlet {

	private static final long serialVersionUID = 3704611136606008852L;
	
	private static final Logger log = LoggerFactory.getLogger(SuggestServlet.class);
	
	private static Set<String> availableTypes = new HashSet<String>(Arrays.asList(new String[] {"Other", "People", "Issues"}));
	
	private static final String CONCEPT_TAG = "concept";
	private static final String PERSON_TAG = "person";
	private static final String METHOD_TAG = "method";
	private static final String MODULE_TAG = "module";
	private static final String FILE_TAG = "file";
	private static final String PRODUCTS_TAG = "product";
	private static final String ISSUE_TAG = "issue";
	

	/**
	 * @throws JMSException
	 * @see HttpServlet#HttpServlet()
	 */
	public SuggestServlet() throws JMSException {
		super();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	@SuppressWarnings("unchecked")
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

		try {
			Map<String, String[]> parameters = request.getParameterMap();
			
			if (log.isDebugEnabled())
				log.debug("Processing a suggestion request with parameters: " + parameters.toString());
				
			// get the suggestion type
			String suggType = null;
			for (String type : availableTypes) {
				if (parameters.containsKey(type)) {
					suggType = type;
					break;
				}
			}
			
			if (suggType == null)
				throw new IllegalArgumentException("Searching for suggestions for unknown type!!");
			
			// get the parameter
			String currInput = request.getParameter(suggType);
	
			// send the message
			String requestID = Utils.genRequestID();
			String outMsg = Utils.genSuggestMessage(currInput, "Other".equals(suggType) ? "People,Concepts,Products,Sources" : suggType);
	
			outMsg = outMsg.replace("${" + REQUEST_ID + "}", requestID);
	
			if (outMsg != null && !outMsg.isEmpty()) {
				Message mqMsg = mqSession.createTextMessage(outMsg);
				mqProducer.send(mqMsg);
	
				String inMsg = receiveMessage(requestID);
	
				if (inMsg != null) {
					// escape all occurrences of & in the message
					inMsg = inMsg.replaceAll("&", "&amp;");
					
					// parse the suggestions and return JSON
					JSONArray jsonArray = new JSONArray();
					DocumentBuilderFactory xmlFactory = DocumentBuilderFactory.newInstance();
					DocumentBuilder builder = xmlFactory.newDocumentBuilder();
					Document xmlDoc = builder.parse(new ByteArrayInputStream(inMsg.getBytes()));
					
					NodeList suggRootNodes = xmlDoc.getElementsByTagName("suggestions");
					if (suggRootNodes.getLength() != 1)
						throw new IllegalArgumentException("The suggestion message has 0 or more then 1 suggestion nodes!");
					
					Node suggRoot = suggRootNodes.item(0);
					NodeList suggNodes = suggRoot.getChildNodes();
					for (int i = 0; i < suggNodes.getLength(); i++) {
						Node suggNode = suggNodes.item(i);
						NamedNodeMap attributes = suggNode.getAttributes();
						
						String tagName = suggNode.getNodeName();
						String label;
						String value;
						String type;
						if (PERSON_TAG.equals(tagName)) {
							label = attributes.getNamedItem("name").getNodeValue();
							value = attributes.getNamedItem("account").getNodeValue();
							type = "person";
						} else if (CONCEPT_TAG.equals(tagName)) {
							label = attributes.getNamedItem("label").getNodeValue();
							value = attributes.getNamedItem("uri").getNodeValue();
							type = "concept";
						} else if (METHOD_TAG.equals(tagName) || FILE_TAG.equals(tagName) || MODULE_TAG.equals(tagName)) {
							label = attributes.getNamedItem("name").getNodeValue();
							value = attributes.getNamedItem("uri").getNodeValue();
							type = "source";
						} else if (PRODUCTS_TAG.equals(tagName)) {
							label = attributes.getNamedItem("label").getNodeValue();
							value = attributes.getNamedItem("uri").getNodeValue();
							type = "product";
						} else if (ISSUE_TAG.equals(tagName)) {
							label = attributes.getNamedItem("label").getNodeValue();
							value = label;
							type = "issue";
						} else throw new IllegalArgumentException("An unexpected suggestion node appeared in the KEUI response: " + tagName);
					
						JSONObject jsonObj = new JSONObject();
						jsonObj.put("label", label);
						jsonObj.put("value", value);
						jsonObj.put("type", type);
						
						jsonArray.add(jsonObj);
					}
					
					response.setContentType("text/json");
					PrintWriter writer = new PrintWriter(response.getOutputStream());
					writer.write(jsonArray.toJSONString());
					writer.flush();
					writer.close();
				}
			}
		} catch (Throwable t) {
			log.error("An unexpected exception occurred!", t);
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
	}
}
