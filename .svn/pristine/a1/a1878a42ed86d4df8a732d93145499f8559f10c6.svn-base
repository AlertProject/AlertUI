package com.jsi.keui.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.TimeZone;

import com.jsi.keui.QueryServlet;

/**
 * A utility class with various static methods.
 * 
 * @author Luka Stopar
 *
 */
public class Utils {
	
	private static final String MESSAGE_HEAD = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:wsnt=\"http://docs.oasis-open.org/wsn/b-2\" xmlns:wsa=\"http://www.w3.org/2005/08/addressing\"> <s:Header> </s:Header> <s:Body> <wsnt:Notify> <wsnt:NotificationMessage> <wsnt:Topic> </wsnt:Topic> <wsnt:ProducerReference> <wsa:Address>http://www.alert-project.eu/keui</wsa:Address> </wsnt:ProducerReference> <wsnt:Message> <ns1:event xmlns:ns1=\"http://www.alert-project.eu/\"	xmlns:o=\"http://www.alert-project.eu/ontoevents-mdservice\" xmlns:r=\"http://www.alert-project.eu/rawevents-forum\" xmlns:r1=\"http://www.alert-project.eu/rawevents-mailinglist\" xmlns:r2=\"http://www.alert-project.eu/rawevents-wiki\"	xmlns:s=\"http://www.alert-project.eu/strevents-kesi\" xmlns:s1=\"http://www.alert-project.eu/strevents-keui\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.alert-project.eu/alert-root.xsd\"> <ns1:head> <ns1:sender>KEUITest</ns1:sender> ";
	private static final String MESSAGE_MIDDLE = " <ns1:sequencenumber>8892485f-0eca-4a12-a406-6804c047897d</ns1:sequencenumber> </ns1:head> <ns1:payload> <ns1:meta> <ns1:startTime>???</ns1:startTime> <ns1:endTime>???</ns1:endTime> <!-- name of event --> <ns1:eventName>KEUIRequest</ns1:eventName> <ns1:eventId>???</ns1:eventId> <ns1:eventType>???</ns1:eventType> </ns1:meta> <ns1:eventData> <s1:keuiRequest> ";
	private static final String MESSAGE_TAIL = " <requestID>${requestID}</requestID> </s1:keuiRequest> </ns1:eventData> </ns1:payload> </ns1:event> </wsnt:Message> </wsnt:NotificationMessage> </wsnt:Notify> </s:Body> </s:Envelope>";
	
	private static final String[] ignoreKeys = {
		"issuesChk",
		"commitsChk",
		"forumsChk",
		"mailsChk",
		"wikisChk",
		
		"unconfirmedChk",
    	"newChk",
    	"assignedChk",
    	"resolveChk",
    	"invalidChk",
    	"worksChk",
    	"fixedChk",
    	"wondChk",
    	"duplicateChk"
	};
	
	private static final Random rand = new Random();
	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("d.M.yyyy hh:mm:ss");
	
	private static String genMessage(String content) {
		StringBuilder builder = new StringBuilder();
		
		builder.append(MESSAGE_HEAD);
		builder.append("<ns1:timestamp>" + dateFormat.format(new Date()) + "</ns1:timestamp>");
		builder.append(MESSAGE_MIDDLE);
		builder.append(content);
		builder.append(MESSAGE_TAIL);
		
		return builder.toString();
	}
	
	/**
	 * Creates a query message querying general data, which can be sent to KEUI.
	 * 
	 * @param query The query
	 * @return
	 * @throws ParseException 
	 */
	public static String genQueryMessage(Properties props) throws ParseException {
		StringBuilder builder = new StringBuilder();
		builder.append("<s1:requestType>GeneralQuery</s1:requestType> <s1:requestData> <query> <queryArgs> <conditions> ");
		
		// insert query parameters
		if (props.containsKey("keywords")) {
			String[] keywords = props.getProperty("keywords").split(",");
			
			builder.append(" <keywords>");
			for (String kw : keywords)
				builder.append(" <kw>" + kw + "</kw>");
			builder.append(" </keywords> ");			
		} 
		if (props.containsKey("concepts")) {
			String[] concepts = props.getProperty("concepts").split(",");
			
			builder.append(" <concepts>");
			for (String c : concepts)
				builder.append(" <concept>" + c + "</concept> ");
			builder.append("</concepts> ");
		}
		if (props.containsKey("people")) {
			String[] people = props.getProperty("people").split(",");
			
			for (String personOrV : people) {
				builder.append(" <accounts>");
				String[] peopleV = personOrV.split("\\|");
				for (String person : peopleV)
					builder.append(" <account name=\"" + person + "\"> </account>");
				builder.append("</accounts> ");
			}
		}
		if (props.containsKey("issues")) {
			String[] issues = props.getProperty("issues").split(",");
			
			for (String issue : issues) 
				builder.append(" <bugId>" + issue + "</bugId>");
			builder.append(" ");
		}
		
		// sources and products go into the same tag
		if (props.containsKey("sources") || props.containsKey("products")) {
			builder.append(" <tagIdStr>");
			
			List<String> tagIdV = new ArrayList<String>();
			if (props.containsKey("sources")) tagIdV.addAll(Arrays.asList(props.getProperty("sources").split(",")));
			if (props.containsKey("products")) tagIdV.addAll(Arrays.asList(props.getProperty("products").split(",")));
			
			for (int i = 0; i < tagIdV.size(); i++) {
				builder.append(tagIdV.get(i));
				if (i < tagIdV.size() - 1)
					builder.append("|");	// the delimiter is |
			}
			
			builder.append("</tagIdStr> ");
		}
		if (props.containsKey("from") || props.contains("to")) {
			builder.append(" <timeline");
			
			SimpleDateFormat format = new SimpleDateFormat("mm/dd/yy");
			format.setTimeZone(TimeZone.getTimeZone("UTC"));
			if (props.containsKey("from")) {
				Date from = format.parse(props.getProperty("from"));
				long winTime = from.getTime() + 11644473600000L; // convert to windows time
				builder.append(" start=\"" + winTime + "\"");
			} 
			if (props.containsKey("to")) {
				Date to = format.parse(props.getProperty("to"));
				long winTime = to.getTime() + 11644473600000L;
				builder.append(" end=\"" + winTime + "\"");
			}
			
			builder.append(" /> ");
		}
		
		// set which fields to query for
		List<String> qFields = new ArrayList<String>(ignoreKeys.length);
		for (String key : ignoreKeys) {
			if (!props.containsKey(key))
				qFields.add(key.substring(0, key.length() - 3));
			else if (!props.getProperty(key).isEmpty()) {
				boolean include = Boolean.parseBoolean(props.getProperty(key));
				if (include)
					qFields.add(key.substring(0, key.length() - 3));
			}
		}
		
		builder.append(" <postTypes>");
		for (int i = 0; i < qFields.size(); i++) {
			builder.append(qFields.get(i));
			if (i < qFields.size() - 1)
				builder.append(",");
		}
		builder.append("</postTypes> ");
		
		builder.append(" </conditions> ");
		builder.append(" </queryArgs> ");
		
		// append type of query arguments
		String type = props.getProperty("type");
		if (QueryServlet.ITEM_TYPE.equals(type)) {
			int offset = props.containsKey("offset") ? Integer.parseInt(props.getProperty("offset")) : 0;
			int maxCount = props.containsKey("maxCount") ? Integer.parseInt(props.getProperty("maxCount")) : 100;
			
			builder.append(" <params offset=\"" + offset + "\" maxCount=\"" + maxCount + "\" resultData=\"itemData\" includeAttachments=\"1\" sortBy=\"dateDesc\" itemDataSnipLen=\"200\" snipMatchKeywords=\"1\" keywordMatchOffset=\"25\" includePeopleData=\"1\" /> ");
		} else if (QueryServlet.PEOPLE_TYPE.equals(type))
			builder.append(" <params resultData=\"peopleData\" maxCountItems=\"1000\" includePeopleData=\"1\" /> ");
		else if (QueryServlet.KEYWORD_TYPE.equals(type))
			builder.append(" <params resultData=\"keywordData\" keywordCount=\"30\" sampleSize=\"-1\" keywordMethod=\"localConceptSpV\" /> ");
		else if (QueryServlet.TIMELINE_TYPE.equals(type))
			builder.append(" <params resultData=\"timelineData\" /> ");
		else throw new IllegalArgumentException("Unexpected query type '" + type + "'!!");
			
		builder.append(" </query> </s1:requestData>");
		return genMessage(builder.toString());
	}
	
	/**
	 * Generates a suggestion message which can be sent to the KEUI component.
	 * 
	 * @param term The input based on which the suggestion will be generated.
	 * @return The message
	 */
	public static String genSuggestMessage(String term, String suggestionType) {
		return genMessage("<s1:requestType>GetSuggestions</s1:requestType> <s1:requestData> <query prefix=\"" + term + "\" suggestionTypes=\"" + suggestionType + "\" /> </s1:requestData>");
	}
	
	public static String genFullDataMessage(long itemID) {
		return genMessage("<s1:requestType>GeneralQuery</s1:requestType> <s1:requestData> <query> <queryArgs> <conditions> <itemIds>" + itemID + "</itemIds> </conditions> </queryArgs> <params	offset=\"0\" maxCount=\"1\" resultData=\"itemData\" includeAttachments=\"0\" sortBy=\"dateDesc\" itemDataSnipLen=\"-1\" snipMatchKeywords=\"1\" keywordMatchOffset=\"25\" includePeopleData=\"1\" /> </query> </s1:requestData>");
	}
	
	/**
	 * Generates and returns a request id.
	 */
	public static String genRequestID() {
		return System.nanoTime() + "" + rand.nextInt(10000);
	}
	
	/**
	 * Returns true if the parameter represents an integer.
	 */
	public static Long parseLong(String number) {
		try {
			return Long.parseLong(number);
		} catch (NumberFormatException nx) {
			return null;
		}
	}
}
